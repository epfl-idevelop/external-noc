---
# tasks file for idevfsd-noc using docker-compose

# - name: Random debug
#   debug:
#     msg: "htpass: {{ frontend.htpass | htpasswd }}"

# ------------------------------------------------ Check that keybase is mounted

- name: Check whether "keys/private_key.pkcs7.pem" is present
  tags: prefly
  local_action: command grep -sq 'END RSA PRIVATE KEY' "{{ playbook_dir }}/keys/private_key.pkcs7.pem"
  register: checkprivatekey
  check_mode: no
  ignore_errors: yes
  changed_when: no
- name: Greet the world if "keys/private_key.pkcs7.pem" is present
  tags: prefly
  debug: msg="{{ playbook_dir }}/keys/private_key.pkcs7.pem is present"
  when: checkprivatekey.rc == 0
- name: Alarm the world if "keys/private_key.pkcs7.pem" is NOT present
  tags: prefly
  fail: msg="Dude, be sure to have {{ playbook_dir }}/keys/private_key.pkcs7.pem present, i.e. launch keybase"
  when: checkprivatekey.rc != 0

# -------------------------------------------------------------------------- Log

- name: Register username@hostname for logs
  tags: prefly
  local_action: shell echo $(date '+%Y-%m-%d %H:%M:%S') $USER@$HOSTNAME
  register: loguserhost
  args:
    executable: /bin/bash

- name: Show username@hostname that will be logged
  debug:
    var: loguserhost.stdout

- name: Log username@hostname on log file
  shell: echo {{ loguserhost.stdout }} >> ansible_log.txt
  args:
    executable: /bin/bash
    chdir: "{{ noc_install_path }}/"

# ------------------------------------------------------------ Load dynamic data

- name: Get URLs from wp-veritas API
  local_action:
    module: shell
    cmd: "{{ playbook_dir }}/idevfsd-noc/vars/sites_from_veritas"
  register: sites_from_veritas

- name: Log urls
  debug:
    msg: "{{urls}}"

# ------------------------------------------------- Directories and static files

- name: Create various destination directories for noc files
  file:
    path: "{{ noc.install_path }}/{{ item }}"
    state: directory
  with_items:
    - grafana/conf

- name: Create writable directories to be used as mount points
  file:
    path: "{{ noc.install_path }}/{{ item }}"
    state: directory
    mode: "u=rwx,g=rwx,o=rwx"
  with_items:
    - grafana/logs
    - grafana/plugins
    - data/grafana
    - data/prometheus

- name: Copy alertmanager static files
  copy:
    src: "alertmanager/"
    dest: "{{ noc.install_path }}/alertmanager/"

- name: Copy grafana static files
  copy:
    src: "grafana/"
    dest: "{{ noc.install_path }}/grafana/"

- name: Copy prometheus static files
  copy:
    src: "prometheus/"
    dest: "{{ noc.install_path }}/prometheus/"

# -------------------------------------------------------------------- Templates

- name: Copy docker-compose file
  template:
    # src: "docker-compose.yml"
    src: "docker-compose.yml"
    dest: "{{ noc.install_path }}/docker-compose.yml"
  register: compose_file

- name: Copy Makefile
  template:
    src: "Makefile"
    dest: "{{ noc.install_path }}/Makefile"
  register: compose_file

- name: Copy grafana template config
  template:
    src: "grafana/{{ item }}"
    dest: "{{ noc.install_path }}/grafana/{{ item }}"
  with_items:
    - conf/grafana.ini
    - provisioning/datasources/idevfsd-prometheus.yml
    - provisioning/notifiers/telegram.yml
  register: grafana_config_files

- name: Copy prometheus template configs
  template:
    src: "prometheus/{{ item }}"
    dest: "{{ noc.install_path }}/prometheus/{{ item }}"
  with_items:
    - prometheus.yml
    - rules/c2c_federate.yml
  register: prometheus_config_files

# ----------------------------------------------------------------- Init control
# This works well until all the containers are stopped...
# - name: Restart prometheus
#   become: yes
#   shell:
#     cmd: "cd {{ noc.install_path }} \
#        && docker-compose pull --ignore-pull-failures prometheus \
#        && docker-compose restart prometheus"
#   when: prometheus_config_files is changed

# - name: Restart grafana
#   shell:
#     cmd: "cd {{ noc.install_path }} && docker-compose restart grafana"
#   when: grafana_config_files is changed

# - name: Restart everything
#   shell:
#     cmd: "cd {{ noc.install_path }} && make restart"
#   when: compose_file is changed
